#!/usr/bin/env node

/**
 * Test script for geolocation functionality
 * Author: Rom√°rio Rodrigues <romariorodrigues.dev@gmail.com>
 */

const { PrismaClient } = require('@prisma/client');

async function testGeolocationFeatures() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üåç TESTANDO FUNCIONALIDADES DE GEOLOCALIZA√á√ÉO\n');
    console.log('=' .repeat(60));

    // 1. Test Google Maps Service availability
    console.log('\n1Ô∏è‚É£ VERIFICA√á√ÉO DO GOOGLE MAPS SERVICE');
    console.log('‚îÄ'.repeat(40));
    
    try {
      // Check if Google Maps API key is configured
      const apiKey = process.env.GOOGLE_MAPS_API_KEY;
      if (apiKey) {
        console.log('‚úÖ Google Maps API Key: Configurada');
        console.log(`   üìù Key: ${apiKey.substring(0, 8)}...${apiKey.substring(apiKey.length - 8)}`);
      } else {
        console.log('‚ùå Google Maps API Key: N√ÉO configurada');
        console.log('   üí° Configure GOOGLE_MAPS_API_KEY no .env.local');
      }
    } catch (error) {
      console.log('‚ùå Erro ao verificar Google Maps API Key');
    }

    // 2. Test Database Services
    console.log('\n2Ô∏è‚É£ VERIFICA√á√ÉO DOS SERVI√áOS DISPON√çVEIS');
    console.log('‚îÄ'.repeat(40));
    
    const services = await prisma.service.findMany({
      include: {
        category: true,
        providers: {
          include: {
            serviceProvider: {
              include: {
                user: true
              }
            }
          }
        }
      },
      where: {
        providers: {
          some: {}
        }
      }
    });

    console.log(`üìä Total de servi√ßos com prestadores: ${services.length}`);
    
    services.forEach((service, index) => {
      console.log(`\nüîß ${index + 1}. ${service.name}`);
      console.log(`   üìÇ Categoria: ${service.category.name}`);
      console.log(`   üë• Prestadores: ${service.providers.length}`);
      
      service.providers.slice(0, 2).forEach((provider, pIndex) => {
        console.log(`   üë®‚Äçüíº ${pIndex + 1}. ${provider.serviceProvider.user.name} - R$ ${provider.basePrice}`);
      });
    });

    // 3. Test Search API
    console.log('\n3Ô∏è‚É£ TESTE DA API DE BUSCA');
    console.log('‚îÄ'.repeat(40));
    
    try {
      const fetch = (await import('node-fetch')).default;
      
      // Test basic search
      console.log('üîç Testando busca b√°sica...');
      const basicResponse = await fetch('http://localhost:3001/api/services/search?q=limpeza');
      
      if (basicResponse.ok) {
        const basicData = await basicResponse.json();
        console.log(`‚úÖ Busca b√°sica: ${basicData.data?.services?.length || 0} servi√ßos encontrados`);
      } else {
        console.log('‚ùå Busca b√°sica falhou:', basicResponse.status);
      }
      
      // Test location search
      console.log('üìç Testando busca com localiza√ß√£o...');
      const locationResponse = await fetch('http://localhost:3001/api/services/search?q=limpeza&local=S√£o Paulo, SP');
      
      if (locationResponse.ok) {
        const locationData = await locationResponse.json();
        console.log(`‚úÖ Busca com localiza√ß√£o: ${locationData.data?.services?.length || 0} servi√ßos encontrados`);
      } else {
        console.log('‚ùå Busca com localiza√ß√£o falhou:', locationResponse.status);
      }
      
    } catch (apiError) {
      console.log('‚ùå Erro ao testar API de busca:', apiError.message);
    }

    // 4. Test Frontend Pages
    console.log('\n4Ô∏è‚É£ TESTE DAS P√ÅGINAS FRONTEND');
    console.log('‚îÄ'.repeat(40));
    
    try {
      const fetch = (await import('node-fetch')).default;
      
      // Test homepage
      const homepageResponse = await fetch('http://localhost:3001');
      console.log(`üìÑ P√°gina inicial: ${homepageResponse.ok ? '‚úÖ OK' : '‚ùå Erro ' + homepageResponse.status}`);
      
      // Test services page
      const servicesResponse = await fetch('http://localhost:3001/servicos');
      console.log(`üîß P√°gina de servi√ßos: ${servicesResponse.ok ? '‚úÖ OK' : '‚ùå Erro ' + servicesResponse.status}`);
      
      // Test search with parameters
      const searchResponse = await fetch('http://localhost:3001/servicos?q=limpeza&local=S√£o Paulo');
      console.log(`üîç Busca com par√¢metros: ${searchResponse.ok ? '‚úÖ OK' : '‚ùå Erro ' + searchResponse.status}`);
      
    } catch (pageError) {
      console.log('‚ùå Erro ao testar p√°ginas:', pageError.message);
    }

    // 5. Summary
    console.log('\n5Ô∏è‚É£ RESUMO E INSTRU√á√ïES');
    console.log('‚îÄ'.repeat(40));
    console.log('üåê Para testar manualmente:');
    console.log('   1. Acesse: http://localhost:3001');
    console.log('   2. Permita geolocaliza√ß√£o quando solicitado');
    console.log('   3. Digite um servi√ßo (ex: "limpeza")');
    console.log('   4. Verifique se a localiza√ß√£o √© preenchida automaticamente');
    console.log('   5. Clique em "Buscar" para testar a busca');
    
    console.log('\nüì± Recursos implementados:');
    console.log('   ‚úÖ Detec√ß√£o autom√°tica de localiza√ß√£o');
    console.log('   ‚úÖ Busca inteligente de servi√ßos');
    console.log('   ‚úÖ Integra√ß√£o com Google Maps (se configurado)');
    console.log('   ‚úÖ Interface responsiva e moderna');
    console.log('   ‚úÖ Fallback para entrada manual de localiza√ß√£o');
    
    console.log('\nüéØ TESTE CONCLU√çDO COM SUCESSO!');
    console.log('=' .repeat(60));
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

testGeolocationFeatures();
