// MyServ Database Schema
// Author: Rom√°rio Rodrigues <romariorodrigues.dev@gmail.com>
// Service marketplace platform connecting service providers with clients

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model for both clients and service providers
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  phone         String
  name          String
  cpfCnpj       String    @unique
  password      String
  profileImage  String?
  userType      UserType
  isActive      Boolean   @default(true)
  isApproved    Boolean   @default(false)
  gender        Gender?
  maritalStatus MaritalStatus?
  description   String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  address       Address?
  serviceProvider ServiceProvider?
  clientProfile   ClientProfile?
  sentRequests    ServiceRequest[] @relation("ClientRequests")
  receivedRequests ServiceRequest[] @relation("ProviderRequests")
  givenReviews    Review[]         @relation("ReviewGiver")
  receivedReviews Review[]         @relation("ReviewReceiver")
  payments        Payment[]
  notifications   Notification[]
  favorites       Favorite[]

  @@map("users")
}

// Service Provider specific data
model ServiceProvider {
  id              String    @id @default(cuid())
  userId          String    @unique
  hasScheduling   Boolean   @default(false)
  hasQuoting      Boolean   @default(true)
  chargesTravel   Boolean   @default(false)
  travelCost      Float?    // SQLite compatible pricing
  waivesTravelOnHire Boolean @default(false)
  isHighlighted   Boolean   @default(false)
  highlightUntil  DateTime?
  activePlan      Plan?     @relation(fields: [planId], references: [id])
  planId          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  services        ServiceProviderService[]
  availability    Availability[]
  subscriptions   Subscription[]
  favoritedBy     Favorite[]

  @@map("service_providers")
}

// Client specific data
model ClientProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("client_profiles")
}

// Address model
model Address {
  id        String   @id @default(cuid())
  userId    String   @unique
  state     String
  city      String
  district  String
  street    String
  number    String
  zipCode   String
  latitude  Float?
  longitude Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// Service categories
model ServiceCategory {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  icon        String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  services    Service[]

  @@map("service_categories")
}

// Individual services
model Service {
  id          String    @id @default(cuid())
  name        String
  description String?
  categoryId  String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  category    ServiceCategory @relation(fields: [categoryId], references: [id])
  providers   ServiceProviderService[]
  requests    ServiceRequest[]

  @@map("services")
}

// Junction table for service providers and their services
model ServiceProviderService {
  id                String    @id @default(cuid())
  serviceProviderId String
  serviceId         String
  basePrice         Float?    // SQLite compatible pricing
  description       String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  service           Service         @relation(fields: [serviceId], references: [id])

  @@unique([serviceProviderId, serviceId])
  @@map("service_provider_services")
}

// Service requests/bookings
model ServiceRequest {
  id                String            @id @default(cuid())
  clientId          String
  providerId        String
  serviceId         String
  requestType       RequestType
  scheduledDate     DateTime?
  scheduledTime     String?
  description       String?
  status            RequestStatus     @default(PENDING)
  estimatedPrice    Float?            // SQLite compatible pricing
  finalPrice        Float?            // SQLite compatible pricing
  travelCost        Float?            // SQLite compatible pricing
  schedulingFee     Float?            // SQLite compatible pricing
  isVisitVirtual    Boolean           @default(false)
  expiresAt         DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  client            User              @relation("ClientRequests", fields: [clientId], references: [id])
  provider          User              @relation("ProviderRequests", fields: [providerId], references: [id])
  service           Service           @relation(fields: [serviceId], references: [id])
  payments          Payment[]
  review            Review?

  @@map("service_requests")
}

// Availability for service providers
model Availability {
  id                String    @id @default(cuid())
  serviceProviderId String
  dayOfWeek         Int       // 0-6 (Sunday-Saturday)
  startTime         String    // HH:MM format
  endTime           String    // HH:MM format
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@map("availability")
}

// Payment records
model Payment {
  id              String        @id @default(cuid())
  userId          String
  serviceRequestId String?
  subscriptionId  String?
  amount          Float         // SQLite compatible pricing
  currency        String        @default("BRL")
  paymentMethod   PaymentMethod
  gateway         PaymentGateway
  gatewayPaymentId String?
  status          PaymentStatus @default(PENDING)
  description     String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  user            User          @relation(fields: [userId], references: [id])
  serviceRequest  ServiceRequest? @relation(fields: [serviceRequestId], references: [id])
  subscription    Subscription? @relation(fields: [subscriptionId], references: [id])

  @@map("payments")
}

// Subscription plans
model Plan {
  id            String    @id @default(cuid())
  name          String    @unique
  description   String?
  price         Float     // SQLite compatible pricing
  billingCycle  BillingCycle
  features      String    // JSON string of features (SQLite compatible)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  subscriptions Subscription[]
  serviceProviders ServiceProvider[]

  @@map("plans")
}

// User subscriptions
model Subscription {
  id            String            @id @default(cuid())
  serviceProviderId String
  planId        String
  status        SubscriptionStatus @default(ACTIVE)
  startDate     DateTime
  endDate       DateTime?
  isAutoRenew   Boolean           @default(true)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  plan          Plan              @relation(fields: [planId], references: [id])
  payments      Payment[]

  @@map("subscriptions")
}

// Reviews and ratings
model Review {
  id              String    @id @default(cuid())
  serviceRequestId String   @unique
  giverId         String
  receiverId      String
  rating          Int       // 1-5 stars
  comment         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  serviceRequest  ServiceRequest @relation(fields: [serviceRequestId], references: [id])
  giver           User           @relation("ReviewGiver", fields: [giverId], references: [id])
  receiver        User           @relation("ReviewReceiver", fields: [receiverId], references: [id])

  @@map("reviews")
}

// System notifications
model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  data      Json?            // Additional data for the notification
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// System settings
model SystemSettings {
  id                    String    @id @default(cuid())
  key                   String    @unique
  value                 String
  description           String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("system_settings")
}

// Supported regions
model SupportedRegion {
  id        String   @id @default(cuid())
  state     String
  city      String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([state, city])
  @@map("supported_regions")
}

// User favorites
model Favorite {
  id                String    @id @default(cuid())
  userId            String
  serviceProviderId String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  serviceProvider   ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@unique([userId, serviceProviderId])
  @@map("favorites")
}

// Enums
enum UserType {
  CLIENT
  SERVICE_PROVIDER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
  OTHER
}

enum RequestType {
  SCHEDULING
  QUOTE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  COMPLETED
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  BOLETO
}

enum PaymentGateway {
  MERCADO_PAGO
  PAGAR_ME
}

enum PaymentStatus {
  PENDING
  PROCESSING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

enum BillingCycle {
  MONTHLY
  QUARTERLY
  ANNUALLY
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

enum NotificationType {
  SERVICE_REQUEST
  PAYMENT
  SYSTEM
  PROMOTIONAL
}
